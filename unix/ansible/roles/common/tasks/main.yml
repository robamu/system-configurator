- name: Update apt package cache
  ansible.builtin.apt:
    update_cache: yes
    force_apt_get: yes
  become_user: root

- name: Activate minimize to dock
  shell: gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'

- name: Install generic packages
  ansible.builtin.apt:
    name:
      - zsh
      - tmux
      - xclip
      - cmake
      - make
      - ninja-build
      - python3-pip
      - pipx
      - libfuse2
    state: present
  become_user: root

- name: Install black
  community.general.pipx:
    name: black

# Should be done early, because some later steps rely on some PATH variables
# set here.
- name: Copy configuration files
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ item.src }}"
    dest: "/home/{{ ansible_user_id }}/{{ item.dest }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0644'
  loop:
    - { src: '.zshrc', dest: '.zshrc' }
    - { src: '.bashrc', dest: '.bashrc' }
    - { src: '.aliases', dest: '.aliases' }
    - { src: '.tmux.conf', dest: '.tmux.conf' }

# ---- Oh My Zsh ----
- name: Check if Oh My Zsh is installed
  ansible.builtin.stat:
    path: "{{ omz_dir }}"
  register: omz

- name: Install Oh My Zsh (git clone)
  ansible.builtin.git:
    repo: https://github.com/ohmyzsh/ohmyzsh.git
    dest: "{{ omz_dir }}"
    version: master
    update: no
  become_user: "{{ ansible_user_id }}"
  when: not omz.stat.exists

- name: Ensure custom plugins directory exists
  ansible.builtin.file:
    path: "{{ omz_dir }}/plugins"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id }}"
  become_user: "{{ ansible_user_id }}"

- name: Clone zsh-autosuggestions plugin
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: "{{ omz_dir }}/plugins/zsh-autosuggestions"
    version: master
    update: yes
    depth: 1
  become_user: "{{ ansible_user_id }}"

- name: Install starship
  ansible.builtin.shell:
    curl -sS https://starship.rs/install.sh --yes | sh

- name: Clone TMUX package manager
  ansible.builtin.git:
    repo: 'https://github.com/tmux-plugins/tpm'
    dest: ~/.tmux/plugins/tpm

- name: Check if nvim is already installed
  shell: command -v nvim
  register: nvim_installed
  ignore_errors: yes
- name: Download neovim.appimage
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/download/v0.11.3/nvim.appimage
    dest: /tmp/nvim.appimage
    mode: '0755'
  when: nvim_installed is failed
- name: Ensure neovim.appimage is executable
  shell: chmod u+x /tmp/nvim.appimage
  when: nvim_installed is failed
- name: Move neovim.appimage to /usr/local/bin/nvim
  become_user: root
  shell: mv /tmp/nvim.appimage /usr/local/bin/nvim
  when: nvim_installed is failed

# ---- Rust / Cargo ----
- name: Check if cargo is installed for this user
  ansible.builtin.stat:
    path: "{{ cargo_path }}"
  register: cargo_stat

- name: Download rustup installer
  when: not cargo_stat.stat.exists
  ansible.builtin.get_url:
    url: https://sh.rustup.rs
    dest: /tmp/rustup-init.sh
    mode: '0755'
    force: yes
  tags:
    - rust

- name: Install rustup/cargo (non-interactive, no PATH modification)
  when: not cargo_stat.stat.exists
  ansible.builtin.shell: /tmp/rustup-init.sh -y --no-modify-path
  args:
    executable: /bin/bash
    creates: "{{ cargo_path }}"
  tags:
    - rust

- name: Ensure cargo bin on PATH in ~/.zprofile
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.zprofile"
    create: true
    mode: '0644'
    block: |
      # Added by Ansible: rustup/cargo
      export PATH="$HOME/.cargo/bin:$PATH"

# Make sure cargo is usable right now
- name: Verify cargo
  ansible.builtin.command: cargo --version
  register: cargo_ver
  changed_when: false

- name: Show cargo version
  ansible.builtin.debug:
    msg: "{{ cargo_ver.stdout }}"

# ---- Cargo-installed tools ----
- name: Install "ripgrep" with locked dependencies
  community.general.cargo:
    name: ripgrep
    locked: true

- name: Install "fd" (fd-find) with locked dependencies
  community.general.cargo:
    name: fd-find
    locked: true

- name: Install "eza" with locked dependencies
  community.general.cargo:
    name: eza
    locked: true

- name: Install "bat" with locked dependencies
  community.general.cargo:
    name: bat
    locked: true
